<decks>
    <deck title="Syntax" language="js">
        <card>
            <front>
            ## variable declaration
            </front>
            <back>
            var x = 1
            let y = 'a'
            const b = [1,2,3]
            </back>
            <meta>variable declaration</meta>
        </card>
        <card>
            <front>
            ## if/else/else if statements
            </front>
            <back>
                if (anyTrueCondition) {
                    // execute this code...
                } else if (someOtherTrueCondition) {
                    // execute this code...
                } else {
                    // do this thing if other conditions are not true
                }
            </back>
            <meta>if/else/else if statements</meta>
        </card>

        <card>
            <front>
            ## arithmetic operators
            </front>
            <back>
            /*
                (+, -, /, *, %, ++, ...)
            */
            // modulus % (division remainder)
            let y = 5
            let x = y % 2 // 1 is the remainer so x is now 1

            x++ // 3 (same as saying x = x + 1)
            y-- // 4 (same as saying y = y - 1)
            </back>
            <meta>
            arithmetic operators
            </meta>
        </card>
        <card>
            <front>
            ## assignment operators
            </front>
            <back>
            /*
            (=, +=, -=, ...)
            */
            let y = 5
            y = y + 1 (y is now 6)
            let x = 10
            x += 5 (x is now 15)
            </back>
            <meta>
                assignment operators
            </meta>
        </card>
        <card>
            <front>
            ## comparison operators
            </front>
            <back>
            /*
                (==, ===)

                == // equal to
                === // 	equal value and equal type
                != // not equal to
            */
            let x = 5
            x === "5" // false
            x == 5 // true
            let num = 10
            let moreThan = num > 5 // true
            x !== 1 // true
            let y = 5
            y = y + 1 (y is now 6)
            let x = 10
            x += 5 (x is now 15)
            </back>
            <meta>
            comparison operators
            </meta>
        </card>
        <card>
            <front>
            ## function
            </front>
            <back>
            function functionName(param1, param2) {
                // param1 is the first value passed in (1)
                // param2 is the second value passed in ([1,2,3])
            }

            function doubleNumbersArr(arr) {
                let newArr = []
                for (let i = 0; i < arr.length; i++) {
                    newArr.push(arr[i])
                }
                return newArr
            }

            functionName(1, [1,2,3]) // undefined (since no return)
            doubleNumbersArr([1,2,3]) // [2,4,6]
            </back>
            <meta>
            function
            </meta>
        </card>
        <card>   
            <front>## comparison operators</front>

            <back>
            /*
            (==, ===)

            == // equal to
            === // 	equal value and equal type
            != // not equal to
            */
            let x = 5
            x === "5" // false
            x == 5 // true
            let num = 10
            let moreThan = num > 5 // true
            x !== 1 // true
            let y = 5
            y = y + 1 (y is now 6)
            let x = 10
            x += 5 (x is now 15)
            </back>
            <meta>
                comparison operators
            </meta>
        </card>

        <card>
            <front>
            ## logical operators
            </front>
            <back>
            /*
            && (and)
            || (or)
            !  (not)

            Logical operators are used to determine the logic between variables or values.
            You can combine these just fine and use as many as you want
            */
            let x = 5
            let y = 10

            (x > 5 && y == 10) // false
            (x == 5 && y === 10) // true
            (x == 5 || y === false) // true
            (!false) // true
            </back>
            <meta>
                logical operators
            </meta>
        </card>

        <card>
            <front>
            ## falsey values
            </front>
            <back>
            /*
                null, undefined, '', false, 0
                are all the "falsey" values
                everything else is true
            */
            let x = ''
            x == true // false
            x == false // true
            let y = null
            y === null // true
            y == false // true
            !y // true
            !0 // true
            </back>
            <meta>
                falsey values
            </meta>
        </card>
        <card>
            <front>
            ## for loop
            </front>
            <back>
            /*
                for loops consist of 3 parts
                1. variable initialization: let i = 0
                2. a comparison: i < 10 (once false the for loop stops)
                3. a change in value: i++ (same as saying i = i + 1)
            */
            for(let i = 0; i < 10; i++) {
                // i gives me 0 through 9
            }
            </back>
            <meta>
            for loops
            </meta>
        </card>
        <card>
            <front>
            ## for loops continued
            </front>
            <back>
            // you can do all the stuff above with for loops...
            let str = ''
            let arr = []
            for(let i = 0; i < 10; i++) {
                str += 'x'
                arr.push(i)
            }

            // str is now 'xxxxxxxxxx'
            // arr is now [0,1,2,3,4,5,6,7,8,9]
            </back>
            <meta>for loops continued</meta>
        </card>
    </deck>

    <deck title="Basics" language="js">
        <card>
            <front>## what is a statement?</front>
            <back>
                /* 
                A statement can set a variable equal to a value. 
                A statement can also be a function call, i.e. document. ... 
                Statements define what the script will do and how it will be done. */
                var x = 5
                foo()
            </back>
            <meta>statements</meta>
        </card>
    </deck>
</decks>