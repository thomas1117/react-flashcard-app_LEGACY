<decks>
    <deck title="variables" language="js">
        <card>
            <front>
            ## variable declaration
            </front>
            <back>
            var x = 1
            let y = 'a'
            const b = [1,2,3]
            </back>
            <meta>variable declaration</meta>
        </card>
        <card>
            <front>
            ## block
            </front>
            <back>
            /*
                A block statement (or compound statement in other languages) 
                is used to group zero or more statements. 
                The block is delimited by a pair of braces ("curly brackets")
                and may optionally be labelled:

                a block is looks like this {}
            */

            function () {

            }

            if (true) {
                var x = 2
                let y = 2
            }

            while() {

            }

            </back>
            <meta>block</meta>
        </card>
        <card>
            <front>
            ## var
            </front>
            <back>
            // var is globally scoped or function scoped
            var x = 2
            function foo() {
                var d = 2
                x // available due to global scoped
            }
            console.log(d) // Uncaught ReferenceError: d is not defined

            </back>
            <meta>var</meta>
        </card>
        <card>
            <front>
            ## let
            </front>
            <back>
            // let is block scoped

            for (let i = 0; i < 10; i++) {
                console.log(i) // 0,1,2,3....
            }
            console.log(i) // Uncaught ReferenceError: i is not defined

            {
                let x = true
            }
            console.log(x) // Uncaught ReferenceError: x is not defined
            </back>
            <meta>let</meta>
        </card>
        <card>
            <front>
            ## const
            </front>
            <back>
            // const is block scoped
            // const cannot be re-assigned
            {
                const y = true
            }
            console.log(y) // Uncaught ReferenceError: y is not defined
            const x = 2
            x = 3 // Uncaught TypeError: Assignment to constant variable
            </back>
            <meta>const</meta>
        </card>
    </deck>
    <deck title="data types" language="js">
        <card>
            <front>
            ## Data types
            </front>
            <back>
            /*
                Essential data types
                string, boolean, number, array, object
                undefined, null
            */
            // string
            const str = 'hello'
            // boolean
            const bln = true // true || false
            // number
            const num = 5
            // array
            const list = [1,2,3]
            // object
            const foo = {
                name: 'John'
            }
            const undef = undefined // no value
            const nil = null // represents empty value
            </back>
            <meta>
            data types
            </meta>
        </card>
    </deck>
    <deck title="operators" language="js">
        <card>
            <front>
            ## what is an operator?
            </front>
            <back>
            /*
                An operator performs some operation on single 
                or multiple operands (data value) and produces a result.

                unary: operates on single value (typeof)
                binary: operates on 2 values
                ternary: operates on 3 values (ternary)

            */

            typeof "a" // 'string'
            var num = 2
            num++ // => 3
            const isThree = num === 3 ? true : false // true
            </back>
            <meta>
            what is an operator?
            </meta>
        </card>
        <card>
            <front>
            ## arithmetic operators
            </front>
            <back>
            /*
                (+, -, /, *, %, ++, ...)
            */
            // modulus % (division remainder)
            let y = 5
            let x = y % 2 // 1 is the remainer so x is now 1

            x++ // 3 (same as saying x = x + 1)
            y-- // 4 (same as saying y = y - 1)
            </back>
            <meta>
            arithmetic operators
            </meta>
        </card>
        <card>
            <front>
            ## assignment operators
            </front>
            <back>
            /*
            (=, +=, -=, ...)
            */
            let y = 5
            y = y + 1 (y is now 6)
            let x = 10
            x += 5 (x is now 15)
            </back>
            <meta>
                assignment operators
            </meta>
        </card>
        <card>
            <front>
            ## comparison operators
            </front>
            <back>
            /*
                (==, ===)

                == // equal to
                === // 	equal value and equal type
                != // not equal to
            */
            let x = 5
            x === "5" // false
            x == 5 // true
            let num = 10
            let moreThan = num > 5 // true
            x !== 1 // true
            let y = 5
            y = y + 1 (y is now 6)
            let x = 10
            x += 5 (x is now 15)
            </back>
            <meta>
            comparison operators
            </meta>
        </card>
    </deck>
    <deck title="loops" language="js">
        <card>
            <front>
            ## for loop
            </front>
            <back>
            /*
                for loops consist of 3 parts
                1. variable initialization: let i = 0
                2. a comparison: i < 10 (once false the for loop stops)
                3. a change in value: i++ (same as saying i = i + 1)
            */
            for(let i = 0; i < 10; i++) {
                // i gives me 0 through 9
            }
            </back>
            <meta>for loop parts</meta>
        </card>
        <card>
            <front>
            ## for loop with array
            </front>
            <back>
            const arr = [1,2,3]
            for(let i = 0; i < arr.length; i++) {
                arr[i] // access array by index (1 then 2 then 3)
            }
            </back>
            <meta>for loop with array</meta>
        </card>
        <card>
            <front>
            ## for loop with string
            </front>
            <back>
            const str = 'hello'
            for(let i = 0; i < str.length; i++) {
                str.charAt(i) // access string by index ('h' 'e' 'l' 'l' 'o')
            }
            </back>
            <meta>for loop with string</meta>
        </card>
        <card>
            <front>
            ## for loop with object
            </front>
            <back>
            const obj = {first: 'john', last: 'smith', age: 22}
            for (let key in obj) {
                console.log(key) // first, last, age
            }
            </back>
            <meta>for loop with object</meta>
        </card>
    </deck>
</decks>