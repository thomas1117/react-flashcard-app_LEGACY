[
    {
        "title": "variables",
        "language": "js",
        "cards": [
            {
                "front": "\n            ## variable declaration\n            ",
                "back": "\n            var x = 1\n            let y = 'a'\n            const b = [1,2,3]\n            ",
                "meta": "variable declaration",
                "language": "js"
            },
            {
                "front": "\n            ## block\n            ",
                "back": "\n            /*\n                A block statement (or compound statement in other languages) \n                is used to group zero or more statements. \n                The block is delimited by a pair of braces (\"curly brackets\")\n                and may optionally be labelled:\n\n                a block is looks like this {}\n            */\n\n            function () {\n\n            }\n\n            if (true) {\n                var x = 2\n                let y = 2\n            }\n\n            while() {\n\n            }\n\n            ",
                "meta": "block",
                "language": "js"
            },
            {
                "front": "\n            ## var\n            ",
                "back": "\n            // var is globally scoped or function scoped\n            var x = 2\n            function foo() {\n                var d = 2\n                x // available due to global scoped\n            }\n            console.log(d) // Uncaught ReferenceError: d is not defined\n\n            ",
                "meta": "var",
                "language": "js"
            },
            {
                "front": "\n            ## let\n            ",
                "back": "\n            // let is block scoped\n\n            for (let i = 0; i < 10; i++) {\n                console.log(i) // 0,1,2,3....\n            }\n            console.log(i) // Uncaught ReferenceError: i is not defined\n\n            {\n                let x = true\n            }\n            console.log(x) // Uncaught ReferenceError: x is not defined\n            ",
                "meta": "let",
                "language": "js"
            },
            {
                "front": "\n            ## const\n            ",
                "back": "\n            // const is block scoped\n            // const cannot be re-assigned\n            {\n                const y = true\n            }\n            console.log(y) // Uncaught ReferenceError: y is not defined\n            const x = 2\n            x = 3 // Uncaught TypeError: Assignment to constant variable\n            ",
                "meta": "const",
                "language": "js"
            }
        ]
    },
    {
        "title": "data types",
        "language": "js",
        "cards": [
            {
                "front": "\n            ## Data types\n            ",
                "back": "\n            /*\n                Essential data types\n                string, boolean, number, array, object\n                undefined, null\n            */\n            // string\n            const str = 'hello'\n            // boolean\n            const bln = true // true || false\n            // number\n            const num = 5\n            // array\n            const list = [1,2,3]\n            // object\n            const foo = {\n                name: 'John'\n            }\n            const undef = undefined // no value\n            const nil = null // represents empty value\n            ",
                "meta": "\n            Data types\n            ",
                "language": "js"
            }
        ]
    },
    {
        "title": "operators",
        "language": "js",
        "cards": [
            {
                "front": "\n            ## what is an operator?\n            ",
                "back": "\n            /*\n                An operator performs some operation on single \n                or multiple operands (data value) and produces a result.\n\n                unary: operates on single value (typeof)\n                binary: operates on 2 values\n                ternary: operates on 3 values (ternary)\n\n            */\n\n            typeof \"a\" // 'string'\n            var num = 2\n            num++ // => 3\n            const isThree = num === 3 ? true : false // true\n            ",
                "meta": "\n            what is an operator?\n            ",
                "language": "js"
            },
            {
                "front": "\n            ## arithmetic operators\n            ",
                "back": "\n            /*\n                (+, -, /, *, %, ++, ...)\n            */\n            // modulus % (division remainder)\n            let y = 5\n            let x = y % 2 // 1 is the remainer so x is now 1\n\n            x++ // 3 (same as saying x = x + 1)\n            y-- // 4 (same as saying y = y - 1)\n            ",
                "meta": "\n            arithmetic operators\n            ",
                "language": "js"
            },
            {
                "front": "\n            ## assignment operators\n            ",
                "back": "\n            /*\n            (=, +=, -=, ...)\n            */\n            let y = 5\n            y = y + 1 (y is now 6)\n            let x = 10\n            x += 5 (x is now 15)\n            ",
                "meta": "\n                assignment operators\n            ",
                "language": "js"
            },
            {
                "front": "\n            ## comparison operators\n            ",
                "back": "\n            /*\n                (==, ===)\n\n                == // equal to\n                === // \tequal value and equal type\n                != // not equal to\n            */\n            let x = 5\n            x === \"5\" // false\n            x == 5 // true\n            let num = 10\n            let moreThan = num > 5 // true\n            x !== 1 // true\n            let y = 5\n            y = y + 1 (y is now 6)\n            let x = 10\n            x += 5 (x is now 15)\n            ",
                "meta": "\n            comparison operators\n            ",
                "language": "js"
            }
        ]
    },
    {
        "title": "loops",
        "language": "js",
        "cards": [
            {
                "front": "\n            ## for loop\n            ",
                "back": "\n            /*\n                for loops consist of 3 parts\n                1. variable initialization: let i = 0\n                2. a comparison: i < 10 (once false the for loop stops)\n                3. a change in value: i++ (same as saying i = i + 1)\n            */\n            for(let i = 0; i < 10; i++) {\n                // i gives me 0 through 9\n            }\n            ",
                "meta": "for loop parts",
                "language": "js"
            },
            {
                "front": "\n            ## for loop with array\n            ",
                "back": "\n            const arr = [1,2,3]\n            for(let i = 0; i < arr.length; i++) {\n                arr[i] // access array by index (1 then 2 then 3)\n            }\n            ",
                "meta": "for loop with array",
                "language": "js"
            },
            {
                "front": "\n            ## for loop with string\n            ",
                "back": "\n            const str = 'hello'\n            for(let i = 0; i < str.length; i++) {\n                str.charAt(i) // access string by index ('h' 'e' 'l' 'l' 'o')\n            }\n            ",
                "meta": "for loop with string",
                "language": "js"
            },
            {
                "front": "\n            ## for loop with object\n            ",
                "back": "\n            const obj = {first: 'john', last: 'smith', age: 22}\n            for (let key in obj) {\n                console.log(key) // first, last, age\n            }\n            ",
                "meta": "for loop with object",
                "language": "js"
            }
        ]
    }
]