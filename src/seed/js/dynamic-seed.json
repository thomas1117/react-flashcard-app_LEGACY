[
    {
        "title": "Syntax",
        "language": "js",
        "cards": [
            {
                "front": "\n            ## variable declaration\n            ",
                "back": "\n            var x = 1\n            let y = 'a'\n            const b = [1,2,3]\n            ",
                "meta": "variable declaration",
                "language": "js"
            },
            {
                "front": "\n            ## if/else/else if statements\n            ",
                "back": "\n                if (anyTrueCondition) {\n                    // execute this code...\n                } else if (someOtherTrueCondition) {\n                    // execute this code...\n                } else {\n                    // do this thing if other conditions are not true\n                }\n            ",
                "meta": "if/else/else if statements",
                "language": "js"
            },
            {
                "front": "\n            ## arithmetic operators\n            ",
                "back": "\n            /*\n                (+, -, /, *, %, ++, ...)\n            */\n            // modulus % (division remainder)\n            let y = 5\n            let x = y % 2 // 1 is the remainer so x is now 1\n\n            x++ // 3 (same as saying x = x + 1)\n            y-- // 4 (same as saying y = y - 1)\n            ",
                "meta": "\n            arithmetic operators\n            ",
                "language": "js"
            },
            {
                "front": "\n            ## assignment operators\n            ",
                "back": "\n            /*\n            (=, +=, -=, ...)\n            */\n            let y = 5\n            y = y + 1 (y is now 6)\n            let x = 10\n            x += 5 (x is now 15)\n            ",
                "meta": "\n                assignment operators\n            ",
                "language": "js"
            },
            {
                "front": "\n            ## comparison operators\n            ",
                "back": "\n            /*\n                (==, ===)\n\n                == // equal to\n                === // \tequal value and equal type\n                != // not equal to\n            */\n            let x = 5\n            x === \"5\" // false\n            x == 5 // true\n            let num = 10\n            let moreThan = num > 5 // true\n            x !== 1 // true\n            let y = 5\n            y = y + 1 (y is now 6)\n            let x = 10\n            x += 5 (x is now 15)\n            ",
                "meta": "\n            comparison operators\n            ",
                "language": "js"
            },
            {
                "front": "\n            ## function\n            ",
                "back": "\n            function functionName(param1, param2) {\n                // param1 is the first value passed in (1)\n                // param2 is the second value passed in ([1,2,3])\n            }\n\n            function doubleNumbersArr(arr) {\n                let newArr = []\n                for (let i = 0; i < arr.length; i++) {\n                    newArr.push(arr[i])\n                }\n                return newArr\n            }\n\n            functionName(1, [1,2,3]) // undefined (since no return)\n            doubleNumbersArr([1,2,3]) // [2,4,6]\n            ",
                "meta": "\n            function\n            ",
                "language": "js"
            },
            {
                "front": "## comparison operators",
                "back": "\n            /*\n            (==, ===)\n\n            == // equal to\n            === // \tequal value and equal type\n            != // not equal to\n            */\n            let x = 5\n            x === \"5\" // false\n            x == 5 // true\n            let num = 10\n            let moreThan = num > 5 // true\n            x !== 1 // true\n            let y = 5\n            y = y + 1 (y is now 6)\n            let x = 10\n            x += 5 (x is now 15)\n            ",
                "meta": "\n                comparison operators\n            ",
                "language": "js"
            },
            {
                "front": "\n            ## logical operators\n            ",
                "back": "\n            /*\n            && (and)\n            || (or)\n            !  (not)\n\n            Logical operators are used to determine the logic between variables or values.\n            You can combine these just fine and use as many as you want\n            */\n            let x = 5\n            let y = 10\n\n            (x > 5 && y == 10) // false\n            (x == 5 && y === 10) // true\n            (x == 5 || y === false) // true\n            (!false) // true\n            ",
                "meta": "\n                logical operators\n            ",
                "language": "js"
            },
            {
                "front": "\n            ## falsey values\n            ",
                "back": "\n            /*\n                null, undefined, '', false, 0\n                are all the \"falsey\" values\n                everything else is true\n            */\n            let x = ''\n            x == true // false\n            x == false // true\n            let y = null\n            y === null // true\n            y == false // true\n            !y // true\n            !0 // true\n            ",
                "meta": "\n                falsey values\n            ",
                "language": "js"
            },
            {
                "front": "\n            ## for loop\n            ",
                "back": "\n            /*\n                for loops consist of 3 parts\n                1. variable initialization: let i = 0\n                2. a comparison: i < 10 (once false the for loop stops)\n                3. a change in value: i++ (same as saying i = i + 1)\n            */\n            for(let i = 0; i < 10; i++) {\n                // i gives me 0 through 9\n            }\n            ",
                "meta": "\n            for loops\n            ",
                "language": "js"
            },
            {
                "front": "\n            ## for loops continued\n            ",
                "back": "\n            // you can do all the stuff above with for loops...\n            let str = ''\n            let arr = []\n            for(let i = 0; i < 10; i++) {\n                str += 'x'\n                arr.push(i)\n            }\n\n            // str is now 'xxxxxxxxxx'\n            // arr is now [0,1,2,3,4,5,6,7,8,9]\n            ",
                "meta": "for loops continued",
                "language": "js"
            }
        ]
    },
    {
        "title": "Basics",
        "language": "js",
        "cards": [
            {
                "front": "## what is a statement?",
                "back": "\n            /* \n            A statement can set a variable equal to a value. \n            A statement can also be a function call, i.e. document. ... \n            Statements define what the script will do and how it will be done. */\n            var x = 5\n            foo()\n            ",
                "meta": "statements",
                "language": "js"
            },
            {
                "front": "## what are primitive values?",
                "back": "\n            /* \n                In JavaScript there are 6 primitive types: \n                undefined null boolean string number symbol\n                \n                Everything else is an object.\n            */\n            let str = 'hello'\n            let bln = true // or false\n            ",
                "meta": "primitive values",
                "language": "js"
            },
            {
                "front": "## What is the difference between var, let, and const?",
                "back": "\n            // var declarations are globally scoped or function scoped\n            // var variables can be updated and re-declared within its scope;\n            var x = 1\n            // let and const are block scoped\n            // let variables can be updated but not re-declared\n            let y = 2\n            // const variables can neither be updated nor re-declared\n            const name = 'mark'\n            name = 'a' // would throw an ERROR\n            ",
                "meta": "var let & const",
                "language": "js"
            },
            {
                "front": "## var let const continued",
                "back": "\n            for (let i = 0; i < 10; i++) {\n                console.log(i) // is defined in block\n            }\n            i // i is not defined outside of the block\n            ",
                "meta": "var let & const continued",
                "language": "js"
            },
            {
                "front": "\n        ## objects\n        ",
                "back": "\n        // objects\n        let person = {age: 4, first: 'John'}\n        // objects can be accessed with dot\n        // or bracket notation\n        let prop = 'age'\n        person.age // 4\n        person[prop] // 4\n        ",
                "meta": "\n        objects\n        ",
                "language": "js"
            },
            {
                "front": "\n        ## methods\n        ",
                "back": "\n        // methods\n        let person = {\n            first: 'Henry',\n            last: 'Henryson',\n            // methods are functions on objects\n            getName: function () {\n                return this.first + ' ' this.last\n            },\n            // I'm a method shorthand!\n            greet() {\n                return `Hi, I'm ${this.getName()}`\n            }\n        }\n        person.getName() // Henry Henryson\n        person.greet() // Hi, I'm Henry Henryson\n        // some methods on Object constructor prototype\n        person.hasOwnProperty(prop) // true\n        person.hasOwnProperty('name') // false\n        ",
                "meta": "\n        methods\n        ",
                "language": "js"
            },
            {
                "front": "\n        ## array methods\n        ",
                "back": "\n        // array methods\n        const nums = [1,2,3]\n        // map: transforms each item in array based on return\n        const multiply = nums.map(item => item * 2) // [2,4,6]\n        // filter: if condition is true keep item else dont\n        const filtered = nums.filter(i => i % 2 === 0) // [2]\n        // reduce: reduces an array to a single value\n        const reduced = nums.reduce((a,b) => a + b) // 6\n        const found = nums.find(item => item === 3) // 3\n        ",
                "meta": "\n        array methods\n        ",
                "language": "js"
            },
            {
                "front": "\n        ## functions\n        ",
                "back": "\n        // functions take values and can do \"things\"\n        // a function will return undefined if nothing is returned\n        function add(a, b) {\n            return a + b\n        }\n        add(1, 2) // 3\n        add(add(1, 2), 2) // 5\n        ",
                "meta": "\n        \n        ",
                "language": "js"
            },
            {
                "front": "\n        ## string methods\n        ",
                "back": "\n        // string methods work because the js engine wraps a String\n        // constructor function around the primitive\n        let str = 'hello'\n        str.charAt(0) // 'h'\n        str.toUpperCase() // HELLO\n        str.indexOf(0) // 'h'\n        str.includes('h') // true\n        ",
                "meta": "\n        string methods\n        ",
                "language": "js"
            },
            {
                "front": "\n        ## function closures\n        ",
                "back": "\n        function makeId() {\n            let count = 1\n            // inner function still has access to parent function scope (IE count...)\n            return () => count++\n        }\n        let id = makeId() // fn()\n        let newId = id() // 1\n        id() // 2\n        id() // 3\n        ",
                "meta": "\n        function closures\n        ",
                "language": "js"
            },
            {
                "front": "\n        ## for loops with objects\n        ",
                "back": "\n        let obj = {name: 'John', age: 6, ssn: 'n/a'}\n        // go over an object and grab keys\n        for (let key in obj) {\n            console.log(key) // name // age // etc...\n        }\n        ",
                "meta": "\n        for loops with objects\n        ",
                "language": "js"
            },
            {
                "front": "\n        for loops with arrays\n        ",
                "back": "\n        // go over an array and grab item in array\n        const arr = [1,2,3]\n        for (let item of arr) {\n            console.log(item) // 1 // 2 // 3\n        }\n        for (let i = 0; i < arr.length; i++) {\n            console.log(arr[i]) // 1 // 2 // 3\n        }\n        ",
                "meta": "\n        for loops with arrays\n        ",
                "language": "js"
            }
        ]
    },
    {
        "title": "es6 and beyond",
        "language": "js",
        "cards": [
            {
                "front": "\n            ## destructuring assignment\n            ",
                "back": "\n            /* The destructuring assignment syntax is a JavaScript expression\n            that makes it possible to unpack values from arrays, or properties \n            from objects, into distinct variables. */\n            ",
                "meta": "\n            destructuring assignment\n            ",
                "language": "js"
            },
            {
                "front": "\n            ## arrays and destructuring\n            ",
                "back": "\n            const arr = [1,2,3]\n            const [one, two, three] = arr\n            one // 1\n            two // 2\n            three // 3\n            ",
                "meta": "\n            arrays and destructuring\n            ",
                "language": "js"
            }
        ]
    }
]